!function(I){var g={};function C(e){if(g[e])return g[e].exports;var A=g[e]={i:e,l:!1,exports:{}};return I[e].call(A.exports,A,A.exports,C),A.l=!0,A.exports}C.m=I,C.c=g,C.d=function(I,g,e){C.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:e})},C.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},C.t=function(I,g){if(1&g&&(I=C(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var e=Object.create(null);if(C.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var A in I)C.d(e,A,function(g){return I[g]}.bind(null,A));return e},C.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return C.d(g,"a",g),g},C.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},C.p="",C(C.s=1)}([function(module,exports){eval("/**\n * 数据类型类\n */\nclass DataType {}\n\nDataType.isObject = obj => Object.prototype.toString.call(obj) === '[object Object]'\nDataType.isNumber = obj => Object.prototype.toString.call(obj) === '[object Number]'\nDataType.isString = obj => Object.prototype.toString.call(obj) === '[object String]'\nDataType.isUndefined = obj => Object.prototype.toString.call(obj) === '[object Undefined]'\nDataType.isBoolean = obj => Object.prototype.toString.call(obj) === '[object Boolean]'\nDataType.isArray = obj => Object.prototype.toString.call(obj) === '[object Array]'\nDataType.isFunction = obj => Object.prototype.toString.call(obj) === '[object Function]'\nDataType.isNull = obj => Object.prototype.toString.call(obj) === '[object Null]'\n\n/**\n * 获取最终的数据类型\n * @param {*} obj\n */\nDataType.getType = obj => {\n    let type = Object.prototype.toString.call(obj)\n    return type.substring(8, type.length - 1)\n}\n\nDataType.ARRAY = 'ARRAY'\nDataType.OBJECT = 'OBJECT'\nDataType.STRING = 'STRING'\nDataType.NUMBER = 'NUMBER'\nDataType.BOOLEAN = 'BOOLEAN'\nDataType.FUNCTION = 'FUNCTION'\nDataType.NULL = 'NULL'\nDataType.UNDEFINED = 'UNDEFINED'\n\nmodule.exports = DataType\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvRGF0YVR5cGUuanM/OWJjOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog5pWw5o2u57G75Z6L57G7XG4gKi9cbmNsYXNzIERhdGFUeXBlIHt9XG5cbkRhdGFUeXBlLmlzT2JqZWN0ID0gb2JqID0+IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xuRGF0YVR5cGUuaXNOdW1iZXIgPSBvYmogPT4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE51bWJlcl0nXG5EYXRhVHlwZS5pc1N0cmluZyA9IG9iaiA9PiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgU3RyaW5nXSdcbkRhdGFUeXBlLmlzVW5kZWZpbmVkID0gb2JqID0+IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBVbmRlZmluZWRdJ1xuRGF0YVR5cGUuaXNCb29sZWFuID0gb2JqID0+IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCb29sZWFuXSdcbkRhdGFUeXBlLmlzQXJyYXkgPSBvYmogPT4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSdcbkRhdGFUeXBlLmlzRnVuY3Rpb24gPSBvYmogPT4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbkRhdGFUeXBlLmlzTnVsbCA9IG9iaiA9PiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgTnVsbF0nXG5cbi8qKlxuICog6I635Y+W5pyA57uI55qE5pWw5o2u57G75Z6LXG4gKiBAcGFyYW0geyp9IG9ialxuICovXG5EYXRhVHlwZS5nZXRUeXBlID0gb2JqID0+IHtcbiAgICBsZXQgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopXG4gICAgcmV0dXJuIHR5cGUuc3Vic3RyaW5nKDgsIHR5cGUubGVuZ3RoIC0gMSlcbn1cblxuRGF0YVR5cGUuQVJSQVkgPSAnQVJSQVknXG5EYXRhVHlwZS5PQkpFQ1QgPSAnT0JKRUNUJ1xuRGF0YVR5cGUuU1RSSU5HID0gJ1NUUklORydcbkRhdGFUeXBlLk5VTUJFUiA9ICdOVU1CRVInXG5EYXRhVHlwZS5CT09MRUFOID0gJ0JPT0xFQU4nXG5EYXRhVHlwZS5GVU5DVElPTiA9ICdGVU5DVElPTidcbkRhdGFUeXBlLk5VTEwgPSAnTlVMTCdcbkRhdGFUeXBlLlVOREVGSU5FRCA9ICdVTkRFRklORUQnXG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVR5cGVcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval("const { isArray, isObject, isFunction, isUndefined, isString } = __webpack_require__(0)\nconst DataType = __webpack_require__(0)\nconst Utils = __webpack_require__(2)\nconst Filters = __webpack_require__(3)\n\nclass Model {\n    \n    /**\n     * @param modelDescription 模型描述对象\n     */\n    constructor (modelDescription) {\n        this.modelDescription = modelDescription\n        this.result = null\n        this.resultType = null\n    }\n    \n    /**\n     * 初始化结果集，对象还是数组\n     * @param data\n     * @returns {{}}\n     * @private\n     */\n    _initResult (data) {\n        let result = null\n        if (isArray(data)) {\n            result = []\n        } else if (isObject(data)) {\n            result = {}\n        } else {\n            throw new Error('The model.generate() requires an array or object type argument.')\n        }\n        return result\n    }\n    \n    /**\n     * 初始化结果集类型\n     * @param data\n     * @returns {string}\n     * @private\n     */\n    _initResultType (data) {\n        let resultType = null\n        if (isArray(data)) {\n            resultType = DataType.ARRAY\n        } else if (isObject(data)) {\n            resultType = DataType.OBJECT\n        } else {\n            throw new Error('The model.generate() requires an array or object type argument.')\n        }\n        return resultType\n    }\n    \n    /**\n     * 判断数据源 data 的 key 对应的 value 值 和模型描述对象中描述的数据类型是否一样\n     * 数据类型不一样，直接抛出异常\n     * @param value 最终值\n     * @param dataType 数据类型\n     * @param errorMessage 错误信息\n     * @private\n     */\n    _checkType (value, dataType, errorMessage) {\n        if (DataType.getType(value) !== DataType.getType(dataType(value))) {\n            throw new Error(errorMessage)\n        }\n    }\n    \n    /**\n     * 获取默认值，有默认值\n     * @param key 数据模型对象中声明的键名\n     * @param value 数据模型对象中property 在 data 中的 value 值\n     * @param modelDescriptionValue 数据模型对象中声明的默认值\n     * @returns {*}\n     * @private\n     */\n    _getDefaultValue (value, modelDescriptionValue, key) {\n        const defaultValue = modelDescriptionValue.default\n        const dataType = modelDescriptionValue.type\n        if (isUndefined(value)) {\n            if (isUndefined(defaultValue)) {\n                throw new Error(key + ' need default value.')\n            } else {\n                const errorMessage = key + '\\'s default value need type ' + DataType.getType(new dataType(defaultValue)) + ', instead of ' + DataType.getType(defaultValue)\n                this._checkType(defaultValue, dataType, errorMessage)\n                return defaultValue\n            }\n        } else {\n            return value\n        }\n    }\n    \n    /**\n     * 获取使用过滤器后的数据\n     * @param value\n     * @param modelDescriptionValue\n     * @returns {*}\n     * @private\n     */\n    _getFilterValue (value, modelDescriptionValue) {\n        // 如果存在过滤器\n        const filter = modelDescriptionValue.filter\n        // 过滤器是函数\n        if (isFunction(filter)) {\n            return filter(value)\n        } else if (isString(filter)) {\n            // 过滤器是字符串\n            const buildInFilter = Filters[filter]\n            if (isFunction(buildInFilter)) {\n                return buildInFilter(value)\n            } else {\n                throw new Error(filter + ' is not a build in filter.')\n            }\n        } else {\n            return value\n        }\n    }\n    \n    /**\n     *\n     * @param data\n     * @param property\n     * @param fn\n     * @returns {{}}\n     * @private\n     */\n    _buildOnArray1(data, property, fn) {\n        const result = []\n        const temp = Utils.deepClone(data)\n        temp[property].forEach(item => {\n            result.push(fn(item))\n        })\n        temp[property] = result\n        return temp\n    }\n    \n    /**\n     * 生成结果\n     * @param data\n     * @param key\n     * @param modelDescriptionValue\n     * @returns {*}\n     * @private\n     */\n    _generateResultFromObject (data, key, modelDescriptionValue) {\n        const { type, property } = modelDescriptionValue\n        // property === 'ADDRESS_INFO' && console.log(type, property)\n        // 若 modelDescriptionValue 不是对象，那么 property 和 数据源的 property 一样\n        // 获得数据源 data 的 key 对应的 value 值\n        let value = null\n        \n        if (isUndefined(property)) {\n            throw new Error(key + ' need property.')\n        }\n        \n        if (isUndefined(type)) {\n            throw new Error(property + ' need type property.')\n        }\n        \n        if (!(type === String || type === Number || type === Boolean || type === Object || type === Array)) {\n            throw new Error(property + ' need type property, only Number, String, Boolean, Object, Array.')\n        }\n        \n        if (type === Array) {\n            const children = modelDescriptionValue.children\n            if (isObject(children)) {\n                if (children.type === Object) {\n                    const temp = Utils.deepClone(data)\n                    const children = modelDescriptionValue.children.children\n                    if (children) {\n                        let model = new Model(children)\n                        const result = []\n                        temp[property].forEach(item => {result.push(model.generate(item))})\n                        model = null\n                        temp[property] = result\n                    }\n                    data = temp\n                }\n                // else {\n                //     throw new Error('children need type property')\n                // }\n                const filter = children.filter\n                if (isFunction(filter)) {\n                    const result = []\n                    const temp = Utils.deepClone(data)\n                    temp[property].forEach(item => { result.push(filter(item)) })\n                    temp[property] = result\n                    data = temp\n                }\n            }\n        }\n        \n        if (type === Object) {\n            const children = modelDescriptionValue.children\n            const temp = Utils.deepClone(data)\n            if (children) {\n                let model = new Model(children)\n                temp[property] = model.generate(temp[property])\n                model = null\n            }\n            data = temp\n        }\n        \n        // property === 'ADDRESS.PROVINCE' && console.log(data, property)\n        value = Utils.getObjectValue(data, property)\n        // 设置默认值\n        value = this._getDefaultValue(value, modelDescriptionValue, key)\n        \n        // 设置使用过滤器后的值\n        value = this._getFilterValue(value, modelDescriptionValue)\n        \n        // 检查类型\n        this._checkType(value, type, key + ' need type ' + DataType.getType(new type(value)) + ', instead of ' + DataType.getType(value))\n        \n        // 否则 直接赋值给 result\n        return value\n    }\n    \n    /**\n     *\n     * @param data\n     * @param modelDescription\n     * @returns {{}}\n     * @private\n     */\n    _buildOnObject(data,modelDescription) {\n        let result = {}\n        // 遍历模型描述对象\n        for (let key in modelDescription) {\n            if (modelDescription.hasOwnProperty(key)) {\n                // 获得模型描述对象的 key 对应的 value 值 modelDescriptionValue\n                const modelDescriptionValue = modelDescription[key]\n                let _modelDescriptionValue = {}\n                // 若 modelDescriptionValue 是对象\n                if (isObject(modelDescriptionValue)) {\n                    _modelDescriptionValue = modelDescriptionValue\n                } else {\n                     _modelDescriptionValue = {\n                        type: modelDescriptionValue,\n                        property: key,\n                    }\n                }\n                result[key] = this._generateResultFromObject(data, key, _modelDescriptionValue)\n            }\n        }\n        return result\n    }\n    \n    /**\n     *\n     * @param data\n     * @param modelDescription\n     * @returns {[]}\n     * @private\n     */\n    _buildOnArray(data, modelDescription) {\n        const result = []\n        let model = new Model(modelDescription)\n        data.forEach(item => { result.push(model.generate(item)) })\n        model = null\n        return result\n    }\n    \n    /**\n     * 构建函数\n     * @param data\n     * @param modelDescription\n     * @param result\n     * @param resultType\n     * @private\n     */\n    _build (data, modelDescription, result, resultType) {\n        // 如果传入的 data 是对象\n        if (resultType === DataType.OBJECT) {\n            return this._buildOnObject(data, modelDescription)\n        }\n        // 如果传入的 data 是数组\n        if (resultType === DataType.ARRAY) {\n            return this._buildOnArray(data, modelDescription)\n        }\n    }\n    \n    /**\n     * 生成函数\n     * @param dataSource 数据源\n     * @returns {*}\n     */\n    generate (dataSource) {\n        const data = Utils.deepClone(dataSource)\n        this.result = this._initResult(data)\n        this.resultType = this._initResultType(data)\n        return this._build(data, this.modelDescription, this.result, this.resultType)\n    }\n}\n\n\nmodule.exports = Model\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvTW9kZWwuanM/ZmM1ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLHVEQUF1RCxHQUFHLG1CQUFPLENBQUMsQ0FBWTtBQUNyRixpQkFBaUIsbUJBQU8sQ0FBQyxDQUFZO0FBQ3JDLGNBQWMsbUJBQU8sQ0FBQyxDQUFTO0FBQy9CLGdCQUFnQixtQkFBTyxDQUFDLENBQVc7O0FBRW5DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELGtDQUFrQztBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsNEJBQTRCO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixvQ0FBb0M7QUFDbEU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgaXNBcnJheSwgaXNPYmplY3QsIGlzRnVuY3Rpb24sIGlzVW5kZWZpbmVkLCBpc1N0cmluZyB9ID0gcmVxdWlyZSgnLi9EYXRhVHlwZScpXG5jb25zdCBEYXRhVHlwZSA9IHJlcXVpcmUoJy4vRGF0YVR5cGUnKVxuY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuL1V0aWxzJylcbmNvbnN0IEZpbHRlcnMgPSByZXF1aXJlKCcuL0ZpbHRlcnMnKVxuXG5jbGFzcyBNb2RlbCB7XG4gICAgXG4gICAgLyoqXG4gICAgICogQHBhcmFtIG1vZGVsRGVzY3JpcHRpb24g5qih5Z6L5o+P6L+w5a+56LGhXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKG1vZGVsRGVzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5tb2RlbERlc2NyaXB0aW9uID0gbW9kZWxEZXNjcmlwdGlvblxuICAgICAgICB0aGlzLnJlc3VsdCA9IG51bGxcbiAgICAgICAgdGhpcy5yZXN1bHRUeXBlID0gbnVsbFxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiDliJ3lp4vljJbnu5Pmnpzpm4bvvIzlr7nosaHov5jmmK/mlbDnu4RcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqIEByZXR1cm5zIHt7fX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9pbml0UmVzdWx0IChkYXRhKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsXG4gICAgICAgIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBbXVxuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB7fVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgbW9kZWwuZ2VuZXJhdGUoKSByZXF1aXJlcyBhbiBhcnJheSBvciBvYmplY3QgdHlwZSBhcmd1bWVudC4nKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICog5Yid5aeL5YyW57uT5p6c6ZuG57G75Z6LXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2luaXRSZXN1bHRUeXBlIChkYXRhKSB7XG4gICAgICAgIGxldCByZXN1bHRUeXBlID0gbnVsbFxuICAgICAgICBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgcmVzdWx0VHlwZSA9IERhdGFUeXBlLkFSUkFZXG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICAgIHJlc3VsdFR5cGUgPSBEYXRhVHlwZS5PQkpFQ1RcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIG1vZGVsLmdlbmVyYXRlKCkgcmVxdWlyZXMgYW4gYXJyYXkgb3Igb2JqZWN0IHR5cGUgYXJndW1lbnQuJylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0VHlwZVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiDliKTmlq3mlbDmja7mupAgZGF0YSDnmoQga2V5IOWvueW6lOeahCB2YWx1ZSDlgLwg5ZKM5qih5Z6L5o+P6L+w5a+56LGh5Lit5o+P6L+w55qE5pWw5o2u57G75Z6L5piv5ZCm5LiA5qC3XG4gICAgICog5pWw5o2u57G75Z6L5LiN5LiA5qC377yM55u05o6l5oqb5Ye65byC5bi4XG4gICAgICogQHBhcmFtIHZhbHVlIOacgOe7iOWAvFxuICAgICAqIEBwYXJhbSBkYXRhVHlwZSDmlbDmja7nsbvlnotcbiAgICAgKiBAcGFyYW0gZXJyb3JNZXNzYWdlIOmUmeivr+S/oeaBr1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2NoZWNrVHlwZSAodmFsdWUsIGRhdGFUeXBlLCBlcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKERhdGFUeXBlLmdldFR5cGUodmFsdWUpICE9PSBEYXRhVHlwZS5nZXRUeXBlKGRhdGFUeXBlKHZhbHVlKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICog6I635Y+W6buY6K6k5YC877yM5pyJ6buY6K6k5YC8XG4gICAgICogQHBhcmFtIGtleSDmlbDmja7mqKHlnovlr7nosaHkuK3lo7DmmI7nmoTplK7lkI1cbiAgICAgKiBAcGFyYW0gdmFsdWUg5pWw5o2u5qih5Z6L5a+56LGh5LitcHJvcGVydHkg5ZyoIGRhdGEg5Lit55qEIHZhbHVlIOWAvFxuICAgICAqIEBwYXJhbSBtb2RlbERlc2NyaXB0aW9uVmFsdWUg5pWw5o2u5qih5Z6L5a+56LGh5Lit5aOw5piO55qE6buY6K6k5YC8XG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0RGVmYXVsdFZhbHVlICh2YWx1ZSwgbW9kZWxEZXNjcmlwdGlvblZhbHVlLCBrZXkpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gbW9kZWxEZXNjcmlwdGlvblZhbHVlLmRlZmF1bHRcbiAgICAgICAgY29uc3QgZGF0YVR5cGUgPSBtb2RlbERlc2NyaXB0aW9uVmFsdWUudHlwZVxuICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQoZGVmYXVsdFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihrZXkgKyAnIG5lZWQgZGVmYXVsdCB2YWx1ZS4nKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBrZXkgKyAnXFwncyBkZWZhdWx0IHZhbHVlIG5lZWQgdHlwZSAnICsgRGF0YVR5cGUuZ2V0VHlwZShuZXcgZGF0YVR5cGUoZGVmYXVsdFZhbHVlKSkgKyAnLCBpbnN0ZWFkIG9mICcgKyBEYXRhVHlwZS5nZXRUeXBlKGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1R5cGUoZGVmYXVsdFZhbHVlLCBkYXRhVHlwZSwgZXJyb3JNZXNzYWdlKVxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIOiOt+WPluS9v+eUqOi/h+a7pOWZqOWQjueahOaVsOaNrlxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqIEBwYXJhbSBtb2RlbERlc2NyaXB0aW9uVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRGaWx0ZXJWYWx1ZSAodmFsdWUsIG1vZGVsRGVzY3JpcHRpb25WYWx1ZSkge1xuICAgICAgICAvLyDlpoLmnpzlrZjlnKjov4fmu6TlmahcbiAgICAgICAgY29uc3QgZmlsdGVyID0gbW9kZWxEZXNjcmlwdGlvblZhbHVlLmZpbHRlclxuICAgICAgICAvLyDov4fmu6TlmajmmK/lh73mlbBcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbHRlcih2YWx1ZSlcbiAgICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhmaWx0ZXIpKSB7XG4gICAgICAgICAgICAvLyDov4fmu6TlmajmmK/lrZfnrKbkuLJcbiAgICAgICAgICAgIGNvbnN0IGJ1aWxkSW5GaWx0ZXIgPSBGaWx0ZXJzW2ZpbHRlcl1cbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGJ1aWxkSW5GaWx0ZXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkSW5GaWx0ZXIodmFsdWUpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmaWx0ZXIgKyAnIGlzIG5vdCBhIGJ1aWxkIGluIGZpbHRlci4nKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSBmblxuICAgICAqIEByZXR1cm5zIHt7fX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9idWlsZE9uQXJyYXkxKGRhdGEsIHByb3BlcnR5LCBmbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXVxuICAgICAgICBjb25zdCB0ZW1wID0gVXRpbHMuZGVlcENsb25lKGRhdGEpXG4gICAgICAgIHRlbXBbcHJvcGVydHldLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChmbihpdGVtKSlcbiAgICAgICAgfSlcbiAgICAgICAgdGVtcFtwcm9wZXJ0eV0gPSByZXN1bHRcbiAgICAgICAgcmV0dXJuIHRlbXBcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICog55Sf5oiQ57uT5p6cXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKiBAcGFyYW0ga2V5XG4gICAgICogQHBhcmFtIG1vZGVsRGVzY3JpcHRpb25WYWx1ZVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dlbmVyYXRlUmVzdWx0RnJvbU9iamVjdCAoZGF0YSwga2V5LCBtb2RlbERlc2NyaXB0aW9uVmFsdWUpIHtcbiAgICAgICAgY29uc3QgeyB0eXBlLCBwcm9wZXJ0eSB9ID0gbW9kZWxEZXNjcmlwdGlvblZhbHVlXG4gICAgICAgIC8vIHByb3BlcnR5ID09PSAnQUREUkVTU19JTkZPJyAmJiBjb25zb2xlLmxvZyh0eXBlLCBwcm9wZXJ0eSlcbiAgICAgICAgLy8g6IulIG1vZGVsRGVzY3JpcHRpb25WYWx1ZSDkuI3mmK/lr7nosaHvvIzpgqPkuYggcHJvcGVydHkg5ZKMIOaVsOaNrua6kOeahCBwcm9wZXJ0eSDkuIDmoLdcbiAgICAgICAgLy8g6I635b6X5pWw5o2u5rqQIGRhdGEg55qEIGtleSDlr7nlupTnmoQgdmFsdWUg5YC8XG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGxcbiAgICAgICAgXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihrZXkgKyAnIG5lZWQgcHJvcGVydHkuJylcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvcGVydHkgKyAnIG5lZWQgdHlwZSBwcm9wZXJ0eS4nKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoISh0eXBlID09PSBTdHJpbmcgfHwgdHlwZSA9PT0gTnVtYmVyIHx8IHR5cGUgPT09IEJvb2xlYW4gfHwgdHlwZSA9PT0gT2JqZWN0IHx8IHR5cGUgPT09IEFycmF5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb3BlcnR5ICsgJyBuZWVkIHR5cGUgcHJvcGVydHksIG9ubHkgTnVtYmVyLCBTdHJpbmcsIEJvb2xlYW4sIE9iamVjdCwgQXJyYXkuJylcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHR5cGUgPT09IEFycmF5KSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IG1vZGVsRGVzY3JpcHRpb25WYWx1ZS5jaGlsZHJlblxuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGNoaWxkcmVuKSkge1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbi50eXBlID09PSBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IFV0aWxzLmRlZXBDbG9uZShkYXRhKVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IG1vZGVsRGVzY3JpcHRpb25WYWx1ZS5jaGlsZHJlbi5jaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtb2RlbCA9IG5ldyBNb2RlbChjaGlsZHJlbilcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW3Byb3BlcnR5XS5mb3JFYWNoKGl0ZW0gPT4ge3Jlc3VsdC5wdXNoKG1vZGVsLmdlbmVyYXRlKGl0ZW0pKX0pXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBbcHJvcGVydHldID0gcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRlbXBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gICAgIHRocm93IG5ldyBFcnJvcignY2hpbGRyZW4gbmVlZCB0eXBlIHByb3BlcnR5JylcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyID0gY2hpbGRyZW4uZmlsdGVyXG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBbXVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gVXRpbHMuZGVlcENsb25lKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIHRlbXBbcHJvcGVydHldLmZvckVhY2goaXRlbSA9PiB7IHJlc3VsdC5wdXNoKGZpbHRlcihpdGVtKSkgfSlcbiAgICAgICAgICAgICAgICAgICAgdGVtcFtwcm9wZXJ0eV0gPSByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRlbXBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh0eXBlID09PSBPYmplY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gbW9kZWxEZXNjcmlwdGlvblZhbHVlLmNoaWxkcmVuXG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gVXRpbHMuZGVlcENsb25lKGRhdGEpXG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBsZXQgbW9kZWwgPSBuZXcgTW9kZWwoY2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgdGVtcFtwcm9wZXJ0eV0gPSBtb2RlbC5nZW5lcmF0ZSh0ZW1wW3Byb3BlcnR5XSlcbiAgICAgICAgICAgICAgICBtb2RlbCA9IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEgPSB0ZW1wXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIHByb3BlcnR5ID09PSAnQUREUkVTUy5QUk9WSU5DRScgJiYgY29uc29sZS5sb2coZGF0YSwgcHJvcGVydHkpXG4gICAgICAgIHZhbHVlID0gVXRpbHMuZ2V0T2JqZWN0VmFsdWUoZGF0YSwgcHJvcGVydHkpXG4gICAgICAgIC8vIOiuvue9rum7mOiupOWAvFxuICAgICAgICB2YWx1ZSA9IHRoaXMuX2dldERlZmF1bHRWYWx1ZSh2YWx1ZSwgbW9kZWxEZXNjcmlwdGlvblZhbHVlLCBrZXkpXG4gICAgICAgIFxuICAgICAgICAvLyDorr7nva7kvb/nlKjov4fmu6TlmajlkI7nmoTlgLxcbiAgICAgICAgdmFsdWUgPSB0aGlzLl9nZXRGaWx0ZXJWYWx1ZSh2YWx1ZSwgbW9kZWxEZXNjcmlwdGlvblZhbHVlKVxuICAgICAgICBcbiAgICAgICAgLy8g5qOA5p+l57G75Z6LXG4gICAgICAgIHRoaXMuX2NoZWNrVHlwZSh2YWx1ZSwgdHlwZSwga2V5ICsgJyBuZWVkIHR5cGUgJyArIERhdGFUeXBlLmdldFR5cGUobmV3IHR5cGUodmFsdWUpKSArICcsIGluc3RlYWQgb2YgJyArIERhdGFUeXBlLmdldFR5cGUodmFsdWUpKVxuICAgICAgICBcbiAgICAgICAgLy8g5ZCm5YiZIOebtOaOpei1i+WAvOe7mSByZXN1bHRcbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKiBAcGFyYW0gbW9kZWxEZXNjcmlwdGlvblxuICAgICAqIEByZXR1cm5zIHt7fX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9idWlsZE9uT2JqZWN0KGRhdGEsbW9kZWxEZXNjcmlwdGlvbikge1xuICAgICAgICBsZXQgcmVzdWx0ID0ge31cbiAgICAgICAgLy8g6YGN5Y6G5qih5Z6L5o+P6L+w5a+56LGhXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBtb2RlbERlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBpZiAobW9kZWxEZXNjcmlwdGlvbi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgLy8g6I635b6X5qih5Z6L5o+P6L+w5a+56LGh55qEIGtleSDlr7nlupTnmoQgdmFsdWUg5YC8IG1vZGVsRGVzY3JpcHRpb25WYWx1ZVxuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGVsRGVzY3JpcHRpb25WYWx1ZSA9IG1vZGVsRGVzY3JpcHRpb25ba2V5XVxuICAgICAgICAgICAgICAgIGxldCBfbW9kZWxEZXNjcmlwdGlvblZhbHVlID0ge31cbiAgICAgICAgICAgICAgICAvLyDoi6UgbW9kZWxEZXNjcmlwdGlvblZhbHVlIOaYr+WvueixoVxuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChtb2RlbERlc2NyaXB0aW9uVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIF9tb2RlbERlc2NyaXB0aW9uVmFsdWUgPSBtb2RlbERlc2NyaXB0aW9uVmFsdWVcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgX21vZGVsRGVzY3JpcHRpb25WYWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG1vZGVsRGVzY3JpcHRpb25WYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiBrZXksXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB0aGlzLl9nZW5lcmF0ZVJlc3VsdEZyb21PYmplY3QoZGF0YSwga2V5LCBfbW9kZWxEZXNjcmlwdGlvblZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqIEBwYXJhbSBtb2RlbERlc2NyaXB0aW9uXG4gICAgICogQHJldHVybnMge1tdfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2J1aWxkT25BcnJheShkYXRhLCBtb2RlbERlc2NyaXB0aW9uKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdXG4gICAgICAgIGxldCBtb2RlbCA9IG5ldyBNb2RlbChtb2RlbERlc2NyaXB0aW9uKVxuICAgICAgICBkYXRhLmZvckVhY2goaXRlbSA9PiB7IHJlc3VsdC5wdXNoKG1vZGVsLmdlbmVyYXRlKGl0ZW0pKSB9KVxuICAgICAgICBtb2RlbCA9IG51bGxcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiDmnoTlu7rlh73mlbBcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqIEBwYXJhbSBtb2RlbERlc2NyaXB0aW9uXG4gICAgICogQHBhcmFtIHJlc3VsdFxuICAgICAqIEBwYXJhbSByZXN1bHRUeXBlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfYnVpbGQgKGRhdGEsIG1vZGVsRGVzY3JpcHRpb24sIHJlc3VsdCwgcmVzdWx0VHlwZSkge1xuICAgICAgICAvLyDlpoLmnpzkvKDlhaXnmoQgZGF0YSDmmK/lr7nosaFcbiAgICAgICAgaWYgKHJlc3VsdFR5cGUgPT09IERhdGFUeXBlLk9CSkVDVCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J1aWxkT25PYmplY3QoZGF0YSwgbW9kZWxEZXNjcmlwdGlvbilcbiAgICAgICAgfVxuICAgICAgICAvLyDlpoLmnpzkvKDlhaXnmoQgZGF0YSDmmK/mlbDnu4RcbiAgICAgICAgaWYgKHJlc3VsdFR5cGUgPT09IERhdGFUeXBlLkFSUkFZKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYnVpbGRPbkFycmF5KGRhdGEsIG1vZGVsRGVzY3JpcHRpb24pXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICog55Sf5oiQ5Ye95pWwXG4gICAgICogQHBhcmFtIGRhdGFTb3VyY2Ug5pWw5o2u5rqQXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZ2VuZXJhdGUgKGRhdGFTb3VyY2UpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IFV0aWxzLmRlZXBDbG9uZShkYXRhU291cmNlKVxuICAgICAgICB0aGlzLnJlc3VsdCA9IHRoaXMuX2luaXRSZXN1bHQoZGF0YSlcbiAgICAgICAgdGhpcy5yZXN1bHRUeXBlID0gdGhpcy5faW5pdFJlc3VsdFR5cGUoZGF0YSlcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1aWxkKGRhdGEsIHRoaXMubW9kZWxEZXNjcmlwdGlvbiwgdGhpcy5yZXN1bHQsIHRoaXMucmVzdWx0VHlwZSlcbiAgICB9XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBNb2RlbFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval("const { isArray, isObject } = __webpack_require__(0)\n\n/**\n * 工具类\n */\nclass Utils {}\n\nUtils.getObjectValue = (data, property) => {\n    if (!isObject(data)) {\n        throw new Error('data need object')\n    }\n    let value = Utils.deepClone(data)\n    if (isArray(property)) {\n        property.length > 0 && property.forEach(key => {\n            value = value[key]\n        })\n        return value\n    } else {\n        return value[property]\n    }\n}\n\nUtils.deepClone = function(obj = {}) {\n    // 值类型的情况下直接返回\n    // obj 是 null，或者不是对象也不是数组，就直接返回\n    if (typeof obj !== 'object' || obj == null) {\n        return obj\n    }\n    // 初始化返回结果,是数组就定义为数组，是对象就定义为对象\n    let result\n    if (obj instanceof Array) {\n        result = []\n    } else {\n        result = {}\n    }\n    \n    for (const key in obj) {\n        // 判断 key 是否是自身的属性\n        // eslint-disable-next-line no-prototype-builtins\n        if (obj.hasOwnProperty(key)) {\n            // 保证不是原型上的属性\n            result[key] = this.deepClone(obj[key])\n        }\n    }\n    return result\n}\n\nmodule.exports = Utils\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVXRpbHMuanM/OWM4ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLG9CQUFvQixHQUFHLG1CQUFPLENBQUMsQ0FBWTs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGlzQXJyYXksIGlzT2JqZWN0IH0gPSByZXF1aXJlKCcuL0RhdGFUeXBlJylcblxuLyoqXG4gKiDlt6XlhbfnsbtcbiAqL1xuY2xhc3MgVXRpbHMge31cblxuVXRpbHMuZ2V0T2JqZWN0VmFsdWUgPSAoZGF0YSwgcHJvcGVydHkpID0+IHtcbiAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBuZWVkIG9iamVjdCcpXG4gICAgfVxuICAgIGxldCB2YWx1ZSA9IFV0aWxzLmRlZXBDbG9uZShkYXRhKVxuICAgIGlmIChpc0FycmF5KHByb3BlcnR5KSkge1xuICAgICAgICBwcm9wZXJ0eS5sZW5ndGggPiAwICYmIHByb3BlcnR5LmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVba2V5XVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWVbcHJvcGVydHldXG4gICAgfVxufVxuXG5VdGlscy5kZWVwQ2xvbmUgPSBmdW5jdGlvbihvYmogPSB7fSkge1xuICAgIC8vIOWAvOexu+Wei+eahOaDheWGteS4i+ebtOaOpei/lOWbnlxuICAgIC8vIG9iaiDmmK8gbnVsbO+8jOaIluiAheS4jeaYr+WvueixoeS5n+S4jeaYr+aVsOe7hO+8jOWwseebtOaOpei/lOWbnlxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gb2JqXG4gICAgfVxuICAgIC8vIOWIneWni+WMlui/lOWbnue7k+aenCzmmK/mlbDnu4TlsLHlrprkuYnkuLrmlbDnu4TvvIzmmK/lr7nosaHlsLHlrprkuYnkuLrlr7nosaFcbiAgICBsZXQgcmVzdWx0XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHJlc3VsdCA9IFtdXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0ge31cbiAgICB9XG4gICAgXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIC8vIOWIpOaWrSBrZXkg5piv5ZCm5piv6Ieq6Lqr55qE5bGe5oCnXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAvLyDkv53or4HkuI3mmK/ljp/lnovkuIrnmoTlsZ7mgKdcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdGhpcy5kZWVwQ2xvbmUob2JqW2tleV0pXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFV0aWxzXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n")},function(module,exports){eval('/**\n * 过滤器类\n */\nclass Filters {}\n\nFilters.price = (price) => {\n    return "¥ " + Number(price) * 100\n}\n\nmodule.exports = Filters\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvRmlsdGVycy5qcz81ODNkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDov4fmu6TlmajnsbtcbiAqL1xuY2xhc3MgRmlsdGVycyB7fVxuXG5GaWx0ZXJzLnByaWNlID0gKHByaWNlKSA9PiB7XG4gICAgcmV0dXJuIFwiwqUgXCIgKyBOdW1iZXIocHJpY2UpICogMTAwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gRmlsdGVyc1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n')}]);